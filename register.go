package cmdbox

import "sync"

// Register is a map of Command pointers each keyed to the Name of the
// Command. While this Register is public for convience and to remove
// unnecessary indirection (delete, sorting, etc.) additions should
// almost always be done by calling cmdbox.New(). When reading or
// writing from Register the normal considerations for safe map
// concurrency should be observed. See Lock() and Unlock.
//
// By convention, commands that begin with an underscore are considered
// hidden and must not appear in any completion. They must be named
// explicitely to be used. See Visible() and Hidden().
//
// Command keys ending with an underscore may indicate a duplicate that
// was detected and added during New(). See Duplicates(), Rename() and
// Remove().
var Register = map[string]*Command{}

var mutex = new(sync.Mutex)

// Lock locks an internal sync.Mutex for package level syncronizations
// such as reading or writing the Register but any simple need for
// concurrency from Command.Method code may benefit. See Lock(),
// Unlock(), Register. Given the high-level scope of the cmdbox package
// low volume of anticipated concurrency needs a regular sync.Mutex is
// used underneath. Don't forget to Unlock(), otherwise you'll block
// your application.
func Lock() { mutex.Lock() }

// Unlock removes the mutex lock from Lock().
func Unlock() { mutex.Unlock() }

// Rename effectively renames a Command in the Register by adding the
// new name with the same *Command and deleting the old one. This is
// useful when a name conflict causes New to append and underscore (_)
// to the duplicate's name. Rename can be called from init() at any
// point after the duplicate has been added to resolve the conflict.
// Note the order of init() execution --- while predictable --- is not
// always apparent.  When in doubt do Rename from main() to be sure.
// Rename is safe for
// concurrency.
func Rename(from, to string) {
	if to == "" || from == "" {
		return
	}
	x, has := Register[from]
	if !has {
		return
	}
	Lock()
	x.As = to
	Register[to] = x
	delete(Register, from)
	Unlock()
}

// Visible returns a map of only the visible Register Commands not
// beginning with underscore ('_'). See Register and Hidden().
func Visible() map[string]*Command {
	vis := make(map[string]*Command, len(Register))
	for k, v := range Register {
		if k[0] != '_' {
			vis[k] = v
		}
	}
	return vis
}

// Hidden returns a map of only the hidden Register Commands beginning
// with underscore ('_'). See Register and Visible().
func Hidden() map[string]*Command {
	hid := make(map[string]*Command, len(Register))
	for k, v := range Register {
		if k[0] == '_' {
			hid[k] = v
		}
	}
	return hid
}

// Duplicates returns map of duplicate commands whose names end with
// underscore (_). Duplicates are generated by New() when the name
// already exists in the Register. See Rename(), Remove(), Register.
func Duplicates() map[string]*Command {
	m := make(map[string]*Command, len(Register))
	for k, v := range Register {
		if k[len(k)-1] == '_' {
			m[k] = v
		}
	}
	return m
}
